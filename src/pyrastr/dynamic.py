class RastrDynamic:
    """
    Класс взаимодействия с расчетным модулем динамики в RastrWin3
    """
    def __init__(self, dynamic):
        """
        Класс взаимодействия с расчетным модулем динамики в RastrWin3
        """
        self._dynamic = dynamic
        self._total_time = float()
        self._slc_values = {0: "SYNC_LOSS_NONE", 1: "SYNC_LOSS_BRANCHANGLE", 2: "SYNC_LOSS_COA", 4: "SYNC_LOSS_OVERSPEED"}
        self.Macro = DynamicMacro(self._dynamic.MacroControl)

    def run(self) -> bool:
        """
        Запускает расчет ЭМПП в режиме аналогичном, используемому командой пользовательского интерфейса «Динамика».
        В процессе расчета результаты сохраняются в *.sna – файл в соответствии с настройками,
        заданными в параметрах динамики.
        Расчет выполняется в синхронном режиме – то есть функция возвращает управление после завершения расчета.
        :return:
        """
        return not bool(self._dynamic.Run())

    async def runAsync(self):
        """
        Запускает расчет ЭМПП в режиме аналогичном, используемому командой пользовательского интерфейса «Динамика».
        В процессе расчета результаты сохраняются в *.sna – файл в соответствии с настройками,
        заданными в параметрах динамики.
        Расчет выполняется в асинхронном режиме – то есть функция возвращает управление после расчета начальных условий
        и создания модели.
        Возвращенный дескриптор потока должен использоваться для ожидания завершения расчета
        с помощью функций синхронизации. Функция предназначена для использования внешними приложениями.
        :return:
        """
        await self._dynamic.RunAsync()

    def runEMSMode(self) -> bool:
        """
        Запускает расчет ЭМПП в режиме EMS-приложения.
        В процессе расчета результаты не сохраняются, контролируемые величины не рассчитываются.
        Расчет выполняется в синхронном режиме – то есть функция возвращает управление после завершения расчета.
        Результат расчета ЭМПП можно анализировать с помощью свойств syncLossCause, timeComputed и resultMessage.
        :return:
        """
        return not bool(self._dynamic.RunEMSmode())

    @property
    def syncLossCause(self) -> str:
        """
        Возвращает результат расчета ЭМПП в EMS-режиме.
        :return: SYNC_LOSS_NONE | SYNC_LOSS_BRANCHANGLE | SYNC_LOSS_COA | SYNC_LOSS_OVERSPEED
        """
        """
        SYNC_LOSS_NONE          – расчет завершен успешно, потери синхронизма не выявлено
        SYNC_LOSS_BRANCHANGLE   – выявлено превышение угла по ветви значения 180°
        SYNC_LOSS_COA           – выявлено превышение угла по сопротивлению генератора значения 180°
        SYNC_LOSS_OVERSPEED     – выявлено превышение допустимой скорости вращения одного или нескольких генераторов.
        Допустимая скорость вращения задается уставкой автомата безопасности в настройках динамики.
        """
        return self._slc_values.get(self._dynamic.SyncLossCause)

    @property
    def timeReached(self) -> float:
        """
        Возвращает время, до которого был рассчитан ЭМПП в EMS-режиме.
        :return: время, до которого был рассчитан ЭМПП в EMS-режиме.
        """
        return self._dynamic.TimeReached

    @property
    def result(self) -> str:
        """
        Возвращает текстовое сообщение, которое соответствует выведенному в протоколе в процессе расчета
        в EMS-режиме при фиксации причины потери синхронизма доступной в свойстве syncLossCause.

        :return:
        """
        return self._dynamic.ResultMessage

    @property
    def totalTime(self) -> float:
        """
        Возвращает текущее значение totalTime
        Свойство синхронизировано со значением параметра «Время расчета» в таблице «Расчеты\Параметры\Динамика»
        :return:
        """
        return self._dynamic.TotalTime

    @totalTime.setter
    def totalTime(self, time: float):
        """
        Устанавливает текущее значение totalTime
        Свойство синхронизировано со значением параметра «Время расчета» в таблице «Расчеты\Параметры\Динамика»
        :return:
        """
        self._dynamic.TotalTime = time

    @property
    def realtimeCSV(self):
        return self._dynamic.RealtimeCSV

    @realtimeCSV.setter
    def realtimeCSV(self, value):
        self._dynamic.RealtimeCSV = value


class DynamicMacro:
    def __init__(self, macro):
        self._macro = macro
        self.Values = self._macro.Values

    def start(self) -> bool:
        """
        Метод start выполняет подготовку, проверку корректности и инициализацию расчетной модели ЭМПП.
        После выполнения команды выполняется расчет начальных условий и подготовка к
        интегрированию в точке времени t0 = 0. Текущее значение расчетного времени tB принимает значение 0.
        В процессе выполнения метода в протокол расчета выводится информация для диагностики работы метода.
        :return: При успешном выполнении возвращает значение True, в противном случае — False.
        """
        return not bool(self._macro.start())

    def proceed(self, time: float):
        """
        Метод выполняет расчет ЭМПП на интервале [tB; time].
        При успешном выполнении возвращает значение True, в противном случае — False.
        В процессе выполнения метода в протокол расчета выводится информация для диагностики работы метода.
        В случае успешного завершения работы метода, текущее значение времени tB принимает
        значение time + h, где h – значение шага интегрирования при расчете точки time.
        Заданные в исходных данных контролируемые величины используются для формирования массивов
        расчетных значений данных величин в интервале [tB; time].
        Если значение tB превышает значение параметра заданной длительности расчета ЭМПП,
        метод возвращает 0 и продолжает расчет ЭМПП, так как контроль длительности расчета должен осуществляться внешними средствами макроса.
        :param time: правая граница интервала времени расчета
        :return: 0?
        """
        return self._macro.Proceed(time)

    def stop(self) -> bool:
        """
        Метод выполняет завершение расчета и освобождение ресурсов, использованных для расчета ЭМПП.
        При успешном выполнении метод возвращает значение True, в противном случае — False.
        В процессе выполнения метода в протокол расчета выводится информация для диагностики работы метода.
        :return: При успешном выполнении метод возвращает значение True, в противном случае — False.
        """
        return not bool(self._macro.Stop())

    @property
    def currentTime(self) -> float:
        """
        Возвращает текущее значение tB
        :return: текущее значение tB
        """
        return self._macro.Time


class DynamicValues:
    def __init__(self, values):
        self._values = values

    def value(self, index: int):
        """
        Возвращает объект класса DynamicValue, соответствующий контролируемой величине с порядковым номером,
        заданным в index.
        Если в контролируемых величинах не будет обнаружено элемента, соответствующего параметру index, выдает COM-исключение.
        Номера контролируемых величин могут не соответствовать номерам записей в таблице контролируемых величин, так как
        часть записей может быть деактивирована переключателем в поле «Отм».
        :param index: порядковый номер контролируемой величины
        :return:
        """
        return DynamicValue(self._values.Item(index))

    @property
    def count(self) -> int:
        """
        Возвращает количество заданных в исходных данных для расчета ЭМПП контролируемых величин.
        Обрабатываются только те контролируемые величины, которые имеют отметку в поле «Отм»
        :return: количество заданных в исходных данных для расчета ЭМПП контролируемых величин
        """
        return self._values.Count

    @property
    def time(self):
        """
        Возвращает массив, в котором содержатся значения времени, для которых выполнены расчеты контролируемых величин.
        :return:
        """
        return self._values.Time


class DynamicValue:
    def __init__(self, value):
        self._value = value

    @property
    def name(self) -> str:
        """
        Возвращает значение поля «Имя» для контролируемой величины.
        :return:
        """
        return self._value.Name

    @property
    def klass(self) -> str:
        """
        Возвращает значение класса объекта из поля «Таблица» для контролируемой величины
        :return:
        """
        return self._value.Class

    @property
    def formula(self) -> str:
        """
        Возвращает значение поля «Формула» для контролируемой величины
        :return:
        """
        return self._value.Property

    @property
    def selection(self) -> str:
        """
        Возвращает значение поля «Выборка» для контролируемой величины
        :return:
        """
        return self._value.Key

    @property
    def value(self):
        """
        Возвращает массив, в котором содержатся результаты расчета для контролируемой величины
        :return:
        """
        return self._value.Value
